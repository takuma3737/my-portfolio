name: PR Preview Deploy

on:
  repository_dispatch:
    types: [deploy-command]

concurrency:
  group: pr-preview-${{ github.event.client_payload.issue.number }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Build and Deploy Preview
    runs-on: ubuntu-latest
    environment:
      name: pr-preview-${{ github.event.client_payload.issue.number }}
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    env:
      ISSUE_NUMBER: ${{ github.event.client_payload.issue.number }}
      COMMENT_ID: ${{ github.event.client_payload.comment.id }}
      RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Ensure command payload is available
        run: |
          if [ -z "${ISSUE_NUMBER}" ]; then
            echo "::error::This workflow must be triggered from a pull request comment using /deploy."
            exit 1
          fi

      - name: React to command
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ env.COMMENT_ID }}
          body: |
            üöÄ Deploying preview...  
            ‚Äì Action run: ${{ env.RUN_URL }}

      - name: Retrieve pull request information
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = Number(process.env.ISSUE_NUMBER);
            const { owner, repo } = context.repo;
            const { data: pr } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: issueNumber,
            });

            core.setOutput('number', pr.number);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('head_repo', pr.head.repo.full_name);

      - name: Fail if Vercel secrets are missing
        run: |
          missing=0
          for var in VERCEL_TOKEN VERCEL_ORG_ID VERCEL_PROJECT_ID; do
            if [ -z "${!var}" ]; then
              echo "::error::Missing secret: ${var}"
              missing=1
            fi
          done
          if [ "$missing" -ne 0 ]; then
            echo "::error::Add the missing secrets in your repository settings."
            exit 1
          fi

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr-info.outputs.head_repo }}
          ref: ${{ steps.pr-info.outputs.head_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            front/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: front

      - name: Build project
        run: npm run build

      - name: Pull Vercel environment
        working-directory: front
        env:
          VERCEL_TOKEN: ${{ env.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
        run: npx vercel pull --yes --environment=preview --token "${VERCEL_TOKEN}"

      - name: Deploy preview to Vercel
        id: deploy
        working-directory: front
        env:
          VERCEL_TOKEN: ${{ env.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ env.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ env.VERCEL_PROJECT_ID }}
          PR_NUMBER: ${{ steps.pr-info.outputs.number }}
          HEAD_SHA: ${{ steps.pr-info.outputs.head_sha }}
          HEAD_REF: ${{ steps.pr-info.outputs.head_ref }}
        run: |
          DEPLOY_RESPONSE=$(npx vercel deploy \
            --prebuilt \
            --yes \
            --token "${VERCEL_TOKEN}" \
            --meta githubCommitSha="${HEAD_SHA}" \
            --meta githubCommitRef="${HEAD_REF}" \
            --meta githubPrNumber="${PR_NUMBER}" \
            --json)

          DEPLOY_URL=$(echo "$DEPLOY_RESPONSE" | jq -r '.url')

          if [ -z "${DEPLOY_URL}" ] || [ "${DEPLOY_URL}" = "null" ]; then
            echo "::error::Failed to determine deploy URL."
            echo "$DEPLOY_RESPONSE"
            exit 1
          fi

          echo "deployment-url=${DEPLOY_URL}" >> "$GITHUB_OUTPUT"
          echo "Preview URL: ${DEPLOY_URL}"

      - name: Update comment with preview URL
        if: success()
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ env.COMMENT_ID }}
          body: |
            ‚úÖ Preview deployed: ${{ steps.deploy.outputs.deployment-url }}  
            ‚Äì Last commit: ${{ steps.pr-info.outputs.head_sha }}

      - name: Post failure update
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ env.COMMENT_ID }}
          body: |
            ‚ùå Preview deployment failed.  
            ‚Äì Please review the logs: ${{ env.RUN_URL }}
