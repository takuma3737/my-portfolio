--- 
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import SpeedInsights from '@vercel/speed-insights/astro';
import '../styles/global.css';

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="ja">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>

		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Noto+Sans+JP:wght@400;500;700&display=swap" rel="stylesheet">
	</head>
	<body>
        <Header />
		<slot />
        <Footer />
		<SpeedInsights />
	</body>
</html>

<style is:global>
	/* 基本フォント設定 */
	body {
		font-family: 'Noto Sans JP', 'Inter', sans-serif;
	}
	
	/* テキスト行数制限 */
	.line-clamp-2 {
		display: -webkit-box;
		-webkit-line-clamp: 2;
		-webkit-box-orient: vertical;
		overflow: hidden;
	}
	
	/* 記事本文のスタイル */
	.prose h1 {
		@apply text-3xl font-bold mb-4 pb-3 border-b-2 border-gray-200;
		margin-top: 2rem; /* mt-8 相当 */
	}
	.prose h2 {
		@apply text-2xl font-bold mb-3 pb-2 border-b border-gray-300;
		margin-top: 2.5rem; /* mt-10 相当 */
	}
	.prose h3 {
		@apply text-xl font-bold mb-2;
		margin-top: 2rem; /* mt-8 相当 */
	}
	.prose h4 {
		@apply text-lg font-semibold mb-2;
		margin-top: 1.5rem; /* mt-6 相当 */
	}
	.prose p {
		@apply mb-4;
		line-height: 2.0; /* leading-relaxed (1.625) から 1.8 に変更 */
	}
	/* 空の段落や改行の間隔を調整 */
	.prose p:empty {
		@apply mb-2;
	}
	.prose br {
		line-height: 0.5;
	}
	.prose a {
		@apply text-green-600 underline hover:text-green-700;
	}
	.prose ul {
		@apply list-disc pl-6 mb-4 space-y-1;
	}
	.prose ol {
		@apply list-decimal pl-6 mb-4 space-y-1;
	}
	.prose li {
		@apply leading-relaxed;
	}
	
	/* 通常の引用ブロック */
	.prose blockquote {
		@apply border-l-4 border-gray-400 pl-4 my-4 text-gray-600;
		font-style: normal; /* 斜体を無効化 */
		line-height: 1.8;
	}
	
	/* |記法による色付きブロック */
	.color-block {
		@apply rounded-lg border-l-4 text-gray-900 my-4;
		font-style: normal;
		line-height: 1.5;
		padding: 0.75rem 1rem; /* py-3 px-4 相当に調整 */
		display: flex;
		align-items: center;
		min-height: 2.5rem; /* 文字サイズの約1.5倍の高さ */
	}
	
	/* 各色のバリエーション */
	.color-block.green {
		@apply bg-green-50 border-green-400;
	}
	
	.color-block.blue {
		@apply bg-blue-50 border-blue-400;
	}
	
	.color-block.yellow {
		@apply bg-yellow-50 border-yellow-400;
	}
	
	.color-block.red {
		@apply bg-red-50 border-red-400;
	}
	
	.color-block.purple {
		@apply bg-purple-50 border-purple-400;
	}
	
	.color-block.orange {
		@apply bg-orange-50 border-orange-400;
	}
	
	.color-block.gray {
		@apply bg-gray-50 border-gray-400;
	}
	
	.color-block.pink {
		@apply bg-pink-50 border-pink-400;
	}
	
	.color-block.indigo {
		@apply bg-indigo-50 border-indigo-400;
	}
	
	.color-block.teal {
		@apply bg-teal-50 border-teal-400;
	}
	
	/* 色付きブロック内の見出しスタイル調整 */
	.color-block h1,
	.color-block h2,
	.color-block h3 {
		margin: 0;
		line-height: 1.4;
	}
	
	/* 見出しを含む色付きブロック用のクラス */
	.color-block.has-heading {
		display: block;
		padding: 0.75rem 1rem;
	}
	
	/* 会話風コードブロックのスタイル */
	.conversation-code {
		@apply bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4;
	}
	.conversation-code .speaker {
		@apply text-sm font-semibold text-gray-700 mb-2 border-b border-gray-200 pb-2;
	}
	.conversation-code .speaker::before {
		content: "💬 ";
	}
	.conversation-code pre {
		@apply bg-gray-900 text-white text-sm rounded-md p-3 overflow-x-auto;
		margin: 0;
	}
	.conversation-code code {
		@apply text-white;
		background: transparent;
		padding: 0;
	}
	
	/* 標準のコードブロックのスタイル改善 */
	.prose pre {
		@apply bg-gray-900 text-white text-sm rounded-lg p-4 overflow-x-auto mb-4;
	}
	.prose code {
		@apply bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm;
	}
	.prose pre code {
		@apply bg-transparent text-white p-0;
	}
	
	/* 強調テキストのスタイル */
	.prose strong {
		@apply font-bold text-gray-900;
	}
	
	/* 会話風の質問・回答スタイル */
	.qa-block {
		@apply bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4;
	}
	.qa-block .question {
		@apply text-sm font-semibold text-blue-700 mb-2;
	}
	.qa-block .question::before {
		content: "🤔 ";
	}
	.qa-block .answer {
		@apply text-gray-700 leading-relaxed;
	}
	.qa-block .answer::before {
		content: "💡 ";
		@apply text-yellow-500;
	}
</style>

<script>
	// |記法による色付きブロックを処理
	document.addEventListener('DOMContentLoaded', function() {
		// |記法のパターンを検索して置換
		const proseParagraphs = document.querySelectorAll('.prose p');
		
		proseParagraphs.forEach(p => {
			const text = p.textContent?.trim() || '';
			
			// |color: で始まるパターンをチェック
			const colorMatch = text.match(/^\|(\w+):\s*(.*)$/s);
			if (colorMatch && p.parentNode) {
				const [, color, content] = colorMatch;
				
				// 新しいdiv要素を作成
				const colorBlock = document.createElement('div');
				colorBlock.className = `color-block ${color.toLowerCase()}`;
				
				// Markdownの見出し記法を処理
				let processedContent = content;
				
				// 見出し処理（長いものから順に、マルチラインフラグ使用）
				processedContent = processedContent.replace(/^### (.+)$/gm, '<h3 class="text-lg font-semibold mb-2 mt-0">$1</h3>');
				processedContent = processedContent.replace(/^## (.+)$/gm, '<h2 class="text-xl font-bold mb-3 mt-0">$1</h2>');
				processedContent = processedContent.replace(/^# (.+)$/gm, '<h1 class="text-2xl font-bold mb-4 mt-0">$1</h1>');
				
				// 太字処理
				processedContent = processedContent.replace(/\*\*([^*]+)\*\*/g, '<strong class="font-bold">$1</strong>');
				
				// インラインコード処理
				processedContent = processedContent.replace(/`([^`]+)`/g, '<code class="bg-gray-100 text-gray-800 px-2 py-1 rounded text-sm">$1</code>');
				
				// 斜体処理（太字とコードの処理後）
				processedContent = processedContent.replace(/\*([^*]+)\*/g, '<em class="italic">$1</em>');
				
				// 改行をHTMLの改行に変換
				processedContent = processedContent.replace(/\n/g, '<br>');
				
				colorBlock.innerHTML = processedContent;
				
				// 見出しが含まれている場合は専用クラスを追加
				if (/<h[1-3]/.test(processedContent)) {
					colorBlock.classList.add('has-heading');
				}
				
				// 元の段落を置換
				p.parentNode.replaceChild(colorBlock, p);
			}
		});
	});
</script>