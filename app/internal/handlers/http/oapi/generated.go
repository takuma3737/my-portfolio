// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "CookieAuth.Scopes"
)

// Comment defines model for Comment.
type Comment struct {
	ArticleSlug    string    `json:"article-slug"`
	AuthorName     string    `json:"author-name"`
	Content        string    `json:"content"`
	CreatedAt      time.Time `json:"created-at"`
	Id             int64     `json:"id"`
	UpdatedAt      time.Time `json:"updated-at"`
	UserIdentifier string    `json:"user-identifier"`
}

// CommentRequest defines model for CommentRequest.
type CommentRequest struct {
	AuthorName *string `json:"author-name,omitempty"`
	Content    string  `json:"content"`
}

// CommentUpdateRequest defines model for CommentUpdateRequest.
type CommentUpdateRequest struct {
	Content string `json:"content"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    *string `json:"code,omitempty"`
	Error   bool    `json:"error"`
	Message string  `json:"message"`
}

// LikeResponse defines model for LikeResponse.
type LikeResponse struct {
	Count     int  `json:"count"`
	UserLiked bool `json:"userLiked"`
}

// SessionResponse defines model for SessionResponse.
type SessionResponse struct {
	Message string `json:"message"`
	Success bool   `json:"success"`
}

// CreateCommentJSONRequestBody defines body for CreateComment for application/json ContentType.
type CreateCommentJSONRequestBody = CommentRequest

// UpdateCommentJSONRequestBody defines body for UpdateComment for application/json ContentType.
type UpdateCommentJSONRequestBody = CommentUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 全コメントを取得（管理者のみ）
	// (GET /admin/comments)
	GetAllComments(ctx echo.Context) error
	// 任意のコメントを削除（管理者のみ）
	// (DELETE /admin/comments/{id})
	AdminDeleteComment(ctx echo.Context, id int64) error
	// 記事のコメント一覧を取得
	// (GET /articles/{slug}/comments)
	GetComments(ctx echo.Context, slug string) error
	// 新しいコメントを投稿
	// (POST /articles/{slug}/comments)
	CreateComment(ctx echo.Context, slug string) error
	// 記事のいいね数とユーザー状態を取得
	// (GET /articles/{slug}/likes)
	GetLikes(ctx echo.Context, slug string) error
	// 記事のいいね状態をトグル
	// (POST /articles/{slug}/likes/toggle)
	ToggleLike(ctx echo.Context, slug string) error
	// 署名付きCookieでユーザーセッションを作成
	// (POST /auth/session)
	CreateSession(ctx echo.Context) error
	// コメントを削除
	// (DELETE /comments/{id})
	DeleteComment(ctx echo.Context, id int64) error
	// コメントを更新
	// (PUT /comments/{id})
	UpdateComment(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllComments(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllComments(ctx)
	return err
}

// AdminDeleteComment converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminDeleteComment(ctx, id)
	return err
}

// GetComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetComments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComments(ctx, slug)
	return err
}

// CreateComment converts echo context to params.
func (w *ServerInterfaceWrapper) CreateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateComment(ctx, slug)
	return err
}

// GetLikes converts echo context to params.
func (w *ServerInterfaceWrapper) GetLikes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLikes(ctx, slug)
	return err
}

// ToggleLike converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleLike(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithOptions("simple", "slug", ctx.Param("slug"), &slug, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ToggleLike(ctx, slug)
	return err
}

// CreateSession converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSession(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSession(ctx)
	return err
}

// DeleteComment converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComment(ctx, id)
	return err
}

// UpdateComment converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateComment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateComment(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin/comments", wrapper.GetAllComments)
	router.DELETE(baseURL+"/admin/comments/:id", wrapper.AdminDeleteComment)
	router.GET(baseURL+"/articles/:slug/comments", wrapper.GetComments)
	router.POST(baseURL+"/articles/:slug/comments", wrapper.CreateComment)
	router.GET(baseURL+"/articles/:slug/likes", wrapper.GetLikes)
	router.POST(baseURL+"/articles/:slug/likes/toggle", wrapper.ToggleLike)
	router.POST(baseURL+"/auth/session", wrapper.CreateSession)
	router.DELETE(baseURL+"/comments/:id", wrapper.DeleteComment)
	router.PUT(baseURL+"/comments/:id", wrapper.UpdateComment)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
